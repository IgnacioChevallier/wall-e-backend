name: Load Tests

on:
  workflow_call:
    inputs:
      test_type:
        description: 'Type of test to run'
        required: true
        type: string
        default: 'load'
      users:
        description: 'Number of concurrent users'
        required: false
        type: string
        default: '100'
      duration:
        description: 'Test duration (e.g., 5m, 300s)'
        required: false
        type: string
        default: '5m'
  schedule:
    # Run load tests daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  load-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: .

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_DB: walle_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install backend dependencies
        run: npm ci

      - name: Install eva-bank dependencies
        working-directory: eva-bank
        run: npm ci

      - name: Install Python dependencies
        working-directory: tests/load
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run database migrations
        run: |
          npx prisma migrate reset --force
          npx prisma migrate deploy
        env:
          DATABASE_URL: postgresql://postgres:password@localhost:5432/walle_db

      - name: Start eva-bank service
        working-directory: eva-bank
        run: |
          npm start &
          sleep 5
        env:
          PORT: 3001

      - name: Start Wall-E backend
        run: |
          npm run start:prod &
          sleep 10
        env:
          DATABASE_URL: postgresql://postgres:password@localhost:5432/walle_db
          JWT_SECRET: test-secret-key
          EVA_BANK_URL: http://localhost:3001

      - name: Wait for services to be ready
        run: |
          timeout 30 bash -c 'until curl -f http://localhost:3000/health; do sleep 2; done'
          timeout 30 bash -c 'until curl -f http://localhost:3001/health; do sleep 2; done'

      - name: Run Load Tests
        if: ${{ github.event.inputs.test_type == 'load' || github.event.inputs.test_type == '' }}
        working-directory: tests/load
        run: |
          mkdir -p reports
          locust -f load_test.py \
            --host=http://localhost:3000 \
            --users=${{ github.event.inputs.users || '50' }} \
            --spawn-rate=5 \
            --run-time=${{ github.event.inputs.duration || '5m' }} \
            --headless \
            --html=reports/load_test_report.html \
            --csv=reports/load_test_results
        env:
          API_HOST: http://localhost:3000

      - name: Run Stress Tests
        if: ${{ github.event.inputs.test_type == 'stress' }}
        working-directory: tests/load
        run: |
          mkdir -p reports
          locust -f stress_test.py \
            --host=http://localhost:3000 \
            --users=${{ github.event.inputs.users || '500' }} \
            --spawn-rate=25 \
            --run-time=${{ github.event.inputs.duration || '5m' }} \
            --headless \
            --html=reports/stress_test_report.html \
            --csv=reports/stress_test_results
        env:
          API_HOST: http://localhost:3000

      - name: Upload test reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: load-test-reports
          path: tests/load/reports/
          retention-days: 30

      - name: Check performance thresholds
        working-directory: tests/load
        run: |
          python3 -c "
          import csv
          import sys
          
          # Read CSV results and check thresholds
          try:
              with open('reports/load_test_results_stats.csv', 'r') as f:
                  reader = csv.DictReader(f)
                  stats = list(reader)
                  
              if stats:
                  last_row = stats[-1]
                  avg_response_time = float(last_row.get('Average Response Time', 0))
                  failure_rate = float(last_row.get('Failure Count', 0)) / max(float(last_row.get('Request Count', 1)), 1)
                  
                  print(f'Average Response Time: {avg_response_time:.2f}ms')
                  print(f'Failure Rate: {failure_rate:.2%}')
                  
                  if avg_response_time > 1000:  # 1 second threshold
                      print('❌ Average response time exceeds 1000ms threshold')
                      sys.exit(1)
                      
                  if failure_rate > 0.05:  # 5% failure rate threshold
                      print('❌ Failure rate exceeds 5% threshold')
                      sys.exit(1)
                      
                  print('✅ All performance thresholds passed')
              else:
                  print('⚠️ No test results found')
          except FileNotFoundError:
              print('⚠️ Test results file not found')
          except Exception as e:
              print(f'⚠️ Error checking thresholds: {e}')
          "

      - name: Cleanup test data
        if: always()
        working-directory: tests/load
        run: |
          python3 scripts/cleanup_test_data.py --hours=1
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: walle_db
          DB_USER: postgres
          DB_PASSWORD: password 