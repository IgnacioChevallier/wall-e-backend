// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  output        = "../generated/prisma"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  alias     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  wallet    Wallet?
}

model Wallet {
  id                      String        @id @default(uuid())
  balance                 Float         @default(0)
  userId                  String        @unique
  user                    User          @relation(fields: [userId], references: [id])
  
  // Transactions initiated from this wallet (money sent out)
  initiatedTransactions   Transaction[] @relation("SenderWallet")
  // Transactions received by this wallet (money came in)
  receivedTransactions    Transaction[] @relation("ReceiverWallet")
  // All transactions involving this wallet (can be used for a general ledger view)
  allTransactions         Transaction[] @relation("EffectedWallet")
}

model Transaction {
  id               String          @id @default(uuid())
  amount           Float
  type             TransactionType
  description      String?
  createdAt        DateTime        @default(now())

  // For P2P, who initiated the transfer
  senderWalletId   String
  senderWallet     Wallet          @relation("SenderWallet", fields: [senderWalletId], references: [id])

  // For P2P, who received the transfer
  receiverWalletId String
  receiverWallet   Wallet          @relation("ReceiverWallet", fields: [receiverWalletId], references: [id])
  
  // Which wallet's balance was directly affected by this specific transaction record.
  // For an 'OUT' transaction type from sender, this is senderWalletId.
  // For an 'IN' transaction type to receiver, this is receiverWalletId.
  effectedWalletId String
  effectedWallet   Wallet          @relation("EffectedWallet", fields: [effectedWalletId], references: [id])
}

enum TransactionType {
  IN
  OUT
}
